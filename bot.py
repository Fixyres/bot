import telebot
from telebot import types
import random
import logging

TOKEN = 'token'

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot(TOKEN)

board_sizes = {
    "3*3": 3,
    "6*6": 6,
    "8*8": 8,
}

rules_dict = {
    "–ü1": "üåü –õ—é–±—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã [–º—É—Ç 60-180+–≤–∞—Ä–Ω]",
    "–ü2": "üö´ –°–ø–∞–º/—Ñ–ª—É–¥ [–º—É—Ç 60-120+–≤–∞—Ä–Ω]. –û–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º/—É–∫—Ä–∞–∏–Ω—Å–∫–æ–º/–∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.",
    "–ü3": "‚õî –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π [–±–∞–Ωüòê]",
    "–ü4": "‚öôÔ∏è –ö–æ–ø–∞–Ω–∏–µ, –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–µ–ª–∏–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞ [–º—É—Ç 30]",
    "–ü5": "üîû –õ—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –≤ –ª—é–±–æ–º –≤–∏–¥–µ [–º—É—Ç 120-180+–≤–∞—Ä–Ω]. –ó–æ–æ—Ñ–∏–ª–∏—è –∏ —Ç.–¥. —Ç–∞–∫–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∫–∞–∫ –≤ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, —Ç–∞–∫ –∏ –≤ –≥–∏—Ñ–∫–∞—Ö –∏ —Å—Ç–∏–∫–µ—Ä–∞—Ö.",
    "–ü6": "üì£ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏—Å–∫—É—Å—Å–∏–∏, —Å—Å–æ—Ä—ã –∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è —Ä–µ—à–∞—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö [–º—É—Ç 60-120+–≤–∞—Ä–Ω]",
    "–ü7": "üïó –°–∫—Ä–∏–º–∞–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ 20:00 –ø–æ –º—Å–∫ [–º—É—Ç 60]",
    "–ü8": "üìõ –†–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ –∏ —Ç.–¥., —Å–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–æ–≤ [–º—É—Ç 60-180+–≤–∞—Ä–Ω]",
    "–ü9": "üö´ –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ [–±–∞–Ω‚ò†Ô∏è]",
    "–ü10": "üõë –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á—Ç–æ-—Ç–æ, –∏–∑-–∑–∞ —á–µ–≥–æ –≤—ã–ª–µ—Ç–∞–µ—Ç —Ç–≥ –∏–ª–∏ –≤–∑–ª–æ–º [–º—É—Ç 60+–≤–∞—Ä–Ω-–±–∞–Ωüë©‚Äçüíª]",
    "–ü12": "üö∑ –ù–µ —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –≤ –≥—Ä—É–ø–ø–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±–µ–∑ –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è [–º—É—Ç 60-–±–∞–Ωü´§]",
    "–ü17": "(–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç [1-60 –º–∏–Ω—É—Ç (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º - 30)])"
}

@bot.message_handler(regexp=r'^–ü—Ä–∞–≤–∏–ª–æ \d+$')
def send_rule_by_number(message):
    rule_number = message.text.split()[1]
    rule_key = f"–ü{rule_number}"
    if rule_key in rules_dict:
        rule_text = rules_dict[rule_key]
        bot.reply_to(message, rule_text, parse_mode='Markdown')
    else:
        bot.reply_to(message, "–¢–∞–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@bot.message_handler(regexp=r'^–ü\d+$')
def send_rule_by_number(message):
    rule_number = message.text[1:]
    rule_key = f"–ü{rule_number}"
    if rule_key in rules_dict:
        rule_text = rules_dict[rule_key]
        bot.reply_to(message, rule_text, parse_mode='Markdown')
    else:
        bot.reply_to(message, "–¢–∞–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@bot.message_handler(regexp=r'^–ü—Ä–∞–≤–∏–ª–∞$')
def send_all_rules(message):
    rules_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª:\n\n" + "\n\n".join([f"{key}: {value}" for key, value in rules_dict.items()])
    bot.reply_to(message, rules_text, parse_mode='Markdown')

games = {}

class TicTacToeGame:
    def __init__(self, game_id, player_x, size):
        self.game_board = [[' ' for _ in range(size)] for _ in range(size)]
        self.players = {'X': player_x, 'O': None}
        self.current_player = None
        self.player_symbols = {'X': '', 'O': ''}
        self.player_names = {'X': '', 'O': ''}
        self.game_active = False
        self.leave_button_added = False
        self.game_id = game_id
        self.size = size
        self.win_condition = size

    def render_board(self):
        keyboard = types.InlineKeyboardMarkup()
        for row in range(self.size):
            buttons = []
            for col in range(self.size):
                symbol = self.player_symbols[self.game_board[row][col]] if self.game_board[row][col] in self.player_symbols else ' '
                callback_data = f"move:{row}:{col}:{self.game_id}"
                buttons.append(types.InlineKeyboardButton(text=symbol, callback_data=callback_data))
            keyboard.row(*buttons)

        return keyboard

    def check_winner(self, sign):
        for row in self.game_board:
            if row.count(sign) == self.win_condition:
                return True
        for col in range(self.size):
            if all(self.game_board[row][col] == sign for row in range(self.size)):
                return True
        if all(self.game_board[i][i] == sign for i in range(self.size)) or all(self.game_board[i][self.size - 1 - i] == sign for i in range(self.size)):
            return True
        return False

    def check_draw(self):
        return all(self.game_board[row][col] != ' ' for row in range(3) for col in range(3))

    def reset_game(self):
        self.game_board = [[' ' for _ in range(3)] for _ in range(3)]
        self.players = {'X': None, 'O': None}
        self.current_player = None
        self.player_names = {'X': '', 'O': ''}
        self.game_active = False
        self.leave_button_added = False

@bot.message_handler(commands=['t'])
def start_game(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if chat_id not in games:
        games[chat_id] = {'count': 0, 'data': {}}

    markup = types.InlineKeyboardMarkup(row_width=2)
    for size_label, size in board_sizes.items():
        callback_data = f'choose_size:{size}:{user_id}'
        button = types.InlineKeyboardButton(size_label, callback_data=callback_data)
        markup.add(button)

    bot.send_message(chat_id, "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è:", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_size'))
def choose_size(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    size = int(call.data.split(':')[1])

    game_id = games[chat_id]['count']
    games[chat_id]['count'] += 1

    new_game = TicTacToeGame(game_id, user_id, size)
    games[chat_id]['data'][game_id] = new_game

    user = call.from_user
    new_game.player_names['X'] = user.first_name

    join_button = types.InlineKeyboardButton('ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data=f'join:{game_id}')
    markup = types.InlineKeyboardMarkup().add(join_button)
    msg = bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f"üéÆ [{user.first_name}](tg://user?id={user.id}), –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞... üïí\n‚¨ú –†–∞–∑–º–µ—Ä –ø–æ–ª—è: {size}x{size}", reply_markup=markup, parse_mode='Markdown')

    new_game.message_id = msg.message_id

@bot.callback_query_handler(func=lambda call: call.data.startswith('join'))
def join_game(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    game_id = int(call.data.split(':')[1])

    current_game = games[chat_id]['data'].get(game_id)

    if current_game and not current_game.game_active and current_game.players['O'] is None and user_id != current_game.players['X']:
        current_game.players['O'] = user_id
        current_game.player_names['O'] = call.from_user.first_name
        current_game.current_player = random.choice(['X', 'O'])
        current_game.player_symbols['X'] = '‚ùå' if random.random() < 0.5 else '‚≠ï'
        current_game.player_symbols['O'] = '‚≠ï' if current_game.player_symbols['X'] == '‚ùå' else '‚ùå'

        markup = current_game.render_board()

        text = f"üî™  [{current_game.player_names['X']}](tg://user?id={current_game.players['X']}) {current_game.player_symbols['X']} –ø—Ä–æ—Ç–∏–≤ [{current_game.player_names['O']}](tg://user?id={current_game.players['O']})  {current_game.player_symbols['O']} üó°Ô∏è\n\n‚è≥ –¢–µ–∫—É—â–∏–π —Ö–æ–¥: [{current_game.player_names[current_game.current_player]}](tg://user?id={current_game.players[current_game.current_player]})"

        message = bot.edit_message_text(chat_id=chat_id, message_id=current_game.message_id, text=text, reply_markup=markup, parse_mode='Markdown')
        current_game.message_id = message.message_id
        current_game.game_active = True
    else:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ. üö´")

@bot.message_handler(commands=['leave'])
def leave_game(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if chat_id not in games or 'data' not in games[chat_id]:
        return

    for game_id, current_game in games[chat_id]['data'].items():
        if current_game and current_game.game_active and (user_id == current_game.players['X'] or user_id == current_game.players['O']):
            text = f"üëã [{message.from_user.first_name}](tg://user?id={message.from_user.id}) –ø–æ–∫–∏–Ω—É–ª(–∞) –∏–≥—Ä—É!\nüòû –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n\nüî™ [{current_game.player_names['X']}](tg://user?id={current_game.players['X']}) {current_game.player_symbols['X']} –ø—Ä–æ—Ç–∏–≤ [{current_game.player_names['O']}](tg://user?id={current_game.players['O']}) {current_game.player_symbols['O']} üó°Ô∏è"

            markup = None
            if not current_game.check_winner(current_game.current_player) and not current_game.check_draw():
                markup = current_game.render_board()

            bot.edit_message_text(chat_id=chat_id, message_id=current_game.message_id, text=text, reply_markup=markup, parse_mode='Markdown')
            del games[chat_id]['data'][game_id]
            current_game.reset_game()
            return

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if chat_id not in games or 'data' not in games[chat_id]:
        return

    query_data = call.data.split(':')
    action = query_data[0]

    if action == 'join':
        game_id = int(query_data[1])
        current_game = games[chat_id]['data'].get(game_id)

        if current_game and not current_game.game_active and current_game.players['O'] is None and user_id != current_game.players['X']:
            current_game.players['O'] = user_id
            current_game.player_names['O'] = call.from_user.first_name
            current_game.current_player = random.choice(['X', 'O'])
            current_game.player_symbols['X'] = '‚ùå' if random.random() < 0.5 else '‚≠ï'
            current_game.player_symbols['O'] = '‚≠ï' if current_game.player_symbols['X'] == '‚ùå' else '‚ùå'

            markup = current_game.render_board()

            text = f"üî™  [{current_game.player_names['X']}](tg://user?id={current_game.players['X']}) {current_game.player_symbols['X']} –ø—Ä–æ—Ç–∏–≤ [{current_game.player_names['O']}](tg://user?id={current_game.players['O']})  {current_game.player_symbols['O']} üó°Ô∏è\n\n‚è≥ –¢–µ–∫—É—â–∏–π —Ö–æ–¥: [{current_game.player_names[current_game.current_player]}](tg://user?id={current_game.players[current_game.current_player]})"

            message = bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=text, reply_markup=markup, parse_mode='Markdown')
            current_game.message_id = message.message_id
            current_game.game_active = True
        else:
            bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ. üö´")
        return

    if action == 'leave':
        game_id = int(query_data[1])
        current_game = games[chat_id]['data'].get(game_id)

        if current_game and current_game.game_active and (user_id == current_game.players['X'] or user_id == current_game.players['O']):
            text = f"üëã [{call.from_user.first_name}](tg://user?id={call.from_user.id}) –ø–æ–∫–∏–Ω—É–ª(–∞) –∏–≥—Ä—É!\nüòû –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n\nüî™ [{current_game.player_names['X']}](tg://user?id={current_game.players['X']}) {current_game.player_symbols['X']} –ø—Ä–æ—Ç–∏–≤ [{current_game.player_names['O']}](tg://user?id={current_game.players['O']}) {current_game.player_symbols['O']} üó°Ô∏è"

            markup = None
            if not current_game.check_winner(current_game.current_player) and not current_game.check_draw():
                markup = current_game.render_board()

            bot.edit_message_text(chat_id=chat_id, message_id=current_game.message_id, text=text, reply_markup=markup, parse_mode='Markdown')
            del games[chat_id]['data'][game_id]
            current_game.reset_game()
        return

    if action == 'move':
        game_id = int(query_data[3])
        current_game = games[chat_id]['data'].get(game_id)

        if current_game and current_game.game_active:
            row, col = map(int, query_data[1:3])
            if current_game.players[current_game.current_player] != user_id:
                bot.answer_callback_query(call.id, "‚õî –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
                return
            if current_game.game_board[row][col] != ' ':
                bot.answer_callback_query(call.id, "#Ô∏è‚É£ –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
                return

            current_game.game_board[row][col] = current_game.current_player
            if current_game.check_winner(current_game.current_player):
                winner_name = current_game.player_names[current_game.current_player]
                text = f"üèÜ [{winner_name}](tg://user?id={current_game.players[current_game.current_player]}) –ø–æ–±–µ–¥–∏–ª(–∞)!\n\nüî™ [{current_game.player_names['X']}](tg://user?id={current_game.players['X']}) {current_game.player_symbols['X']} –ø—Ä–æ—Ç–∏–≤ [{current_game.player_names['O']}](tg://user?id={current_game.players['O']}) {current_game.player_symbols['O']} üó°Ô∏è"
                bot.edit_message_text(chat_id=chat_id, message_id=current_game.message_id, text=text, reply_markup=current_game.render_board(), parse_mode='Markdown')
                del games[chat_id]['data'][game_id]
                current_game.reset_game()
                return

            if current_game.check_draw():
                text = f"üòê –ù–∏—á—å—è!\n\nüî™ [{current_game.player_names['X']}](tg://user?id={current_game.players['X']}) {current_game.player_symbols['X']} –ø—Ä–æ—Ç–∏–≤ [{current_game.player_names['O']}](tg://user?id={current_game.players['O']}) {current_game.player_symbols['O']} üó°Ô∏è"
                bot.edit_message_text(chat_id=chat_id, message_id=current_game.message_id, text=text, reply_markup=current_game.render_board(), parse_mode='Markdown')
                del games[chat_id]['data'][game_id]
                current_game.reset_game()
                return

            current_game.current_player = 'X' if current_game.current_player == 'O' else 'O'
            markup = current_game.render_board()
            text = f"üî™ [{current_game.player_names['X']}](tg://user?id={current_game.players['X']})  {current_game.player_symbols['X']} –ø—Ä–æ—Ç–∏–≤ [{current_game.player_names['O']}](tg://user?id={current_game.players['O']}) {current_game.player_symbols['O']} üó°Ô∏è\n\n‚è≥ –¢–µ–∫—É—â–∏–π —Ö–æ–¥: [{current_game.player_names[current_game.current_player]}](tg://user?id={current_game.players[current_game.current_player]})"
            bot.edit_message_text(chat_id=chat_id, message_id=current_game.message_id, text=text, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(regexp=r'^–ö–Ω–± –∫–∞–º–µ–Ω—å')
def play_rock(message):
    play_game(message, "–∫–∞–º–µ–Ω—å"+'!')

@bot.message_handler(regexp=r'^–ö–Ω–± –Ω–æ–∂–Ω–∏—Ü—ã')
def play_scissors(message):
    play_game(message, "–Ω–æ–∂–Ω–∏—Ü—ã"+'!')

@bot.message_handler(regexp=r'^–ö–Ω–± –±—É–º–∞–≥–∞')
def play_paper(message):
    play_game(message, "–±—É–º–∞–≥–∞"+'!')

def play_game(message, user_choice):
    choices = ["–∫–∞–º–µ–Ω—å!", "–Ω–æ–∂–Ω–∏—Ü—ã!", "–±—É–º–∞–≥–∞!"]
    bot_choice = random.choice(choices)

    result = get_result(user_choice, bot_choice)

    bot.reply_to(message, f"üôã‚Äç‚ôÇÔ∏è –¢–≤–æ–π –≤—ã–±–æ—Ä: {user_choice}\nü§ñ –ú–æ–π –≤—ã–±–æ—Ä: {bot_choice}\n{result}")

def get_result(user_choice, bot_choice):
    if user_choice == bot_choice:
        return "üòê –ù–∏—á—å—è!"
    elif (user_choice == "–∫–∞–º–µ–Ω—å!" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã!") or \
         (user_choice == "–Ω–æ–∂–Ω–∏—Ü—ã!" and bot_choice == "–±—É–º–∞–≥–∞!") or \
         (user_choice == "–±—É–º–∞–≥–∞!" and bot_choice == "–∫–∞–º–µ–Ω—å!"):
        return "üèÜ –¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
    else:
        return "üôÅ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!"

bot.infinity_polling()
